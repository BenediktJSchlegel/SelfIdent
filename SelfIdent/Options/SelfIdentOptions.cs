using Microsoft.Extensions.Configuration;
using SelfIdent.Constants;
using SelfIdent.Enums;
using SelfIdent.Interfaces;
using SelfIdent.Options.Hashing;
using SelfIdent.Validation;

namespace SelfIdent.Options;

/// <summary>
/// Configuration for NetIdentity
/// </summary>
public class SelfIdentOptions
{
    /// <summary>
    /// The Options for Authentication through the SecurityContext
    /// </summary>
    public SecurityContextOptions SecurityContextOptions { get; set; }
    /// <summary>
    /// Options for Roles
    /// </summary>
    public RoleOptions RoleOptions { get; set; }
    /// <summary>
    /// The Type of Database
    /// </summary>
    public DatabaseTypes DatabaseType { get; set; }
    /// <summary>
    /// The Database ConnectionString
    /// </summary>
    public string ConnectionString { get; set; }
    /// <summary>
    /// Schema Name of the Database
    /// </summary>
    public string DatabaseName { get; set; }
    /// <summary>
    /// If users can be locked out
    /// </summary>
    public bool LockoutActive { get; set; } = false;
    /// <summary>
    /// Amount of tries before a user gets locked out, if "LockoutActive" is true
    /// </summary>
    public int LockoutTryCount { get; set; } = 3;
    /// <summary>
    /// Options for password and email validation on registration
    /// </summary>
    public ValidationOptions ValidationOptions { get; set; }
    /// <summary>
    /// The Options to be used by the PasswordHasher
    /// </summary>
    public IHashingOptions PasswordHashOptions { get; set; }
    /// <summary>
    /// If an additional Table should be created for custom user-related data
    /// </summary>
    public bool GenerateCustomDataTable { get; set; } = true;
    /// <summary>
    /// If new accounts should be locked by default. This will also automatically generate a key
    /// that can be used to unlock the account.
    /// </summary>
    public bool LockAccountOnRegistration { get; set; } = false;
    /// <summary>
    /// Length of the Semi-Random Key that gets generated to unlock locked accounts.
    /// Applies to registration-lock and generic locks
    /// </summary>
    public int LockKeyLength { get; set; } = 16;
    /// <summary>
    /// The Hashfunction to be used.
    /// Defaults to PBKDF
    /// </summary>
    public HashFunctionTypes HashFunctionType { get; set; } = HashFunctionTypes.PBKDF;
    /// <summary>
    /// If MFA should be used. 
    /// </summary>
    public bool MultiFactorAuthenticationActive { get; set; } = false;
    /// <summary>
    /// Options for Multi Factor Authentication. 
    /// Used if MultiFactorAuthenticationActive == true55
    /// </summary>
    public MFAOptions MFAOptions { get; set; }
    /// <summary>
    /// When the SecurityContext generated by this Library should be invalidated based on Updates to the Identity
    /// </summary>
    public SecurityContextInvalidationStrictness InvalidationStrictness { get; set; } = SecurityContextInvalidationStrictness.KeyInformationChange;
    /// <summary>
    /// Options for IdentityCaching to improve performance.
    /// </summary>
    public CacheOptions CacheOptions { get; set; }

    public SelfIdentOptions(DatabaseTypes databaseType, string connectionString, string databaseName)
    {
        MFAOptions = new MFAOptions();
        RoleOptions = new RoleOptions();
        ValidationOptions = new ValidationOptions();
        PasswordHashOptions = new PBKDFHashingOptions();
        SecurityContextOptions = new SecurityContextOptions(MainConstants.DEFAULT_SCHEMANAME, SecurityContextOptions.SecurityContextAuthenticationTypes.None);
        CacheOptions = new CacheOptions();

        this.DatabaseType = databaseType;
        this.ConnectionString = connectionString;
        this.DatabaseName = databaseName;
    }
}
